{"version":3,"sources":["actions/index.js","components/CharacterList.js","components/HeroList.js","components/App.js","reducers/characters-reducers.js","reducers/helpers.js","reducers/heroes-reducers.js","reducers/index.js","index.js"],"names":["addCharacterById","id","type","CharacterList","console","log","this","props","state","className","characters","map","character","key","name","onClick","Component","connect","heroes","Hero","hero","App","HeroList","characters_json","action","filter","item","createCharacter","find","c","rootReducer","combineReducers","store","createStore","rootReducers","getState","subscribe","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAKO,SAASA,EAAiBC,GAK/B,MAJe,CACbC,KALyB,gBAMzBD,M,ICFEE,E,uKACM,IAAD,OAGP,OAFAC,QAAQC,IAAIC,KAAKC,MAAO,YACxBH,QAAQC,IAAIC,KAAKE,MAAO,cAEtB,6BACE,qCACA,wBAAIC,UAAU,cAEVH,KAAKC,MAAMG,WAAWC,KAAI,SAAAC,GACxB,OACE,wBAAIC,IAAKD,EAAUX,GAAIQ,UAAU,mBAC/B,yBAAKA,UAAU,aAAaG,EAAUE,MACtC,yBACEL,UAAU,yBACVM,QAAS,kBAAM,EAAKR,MAAMP,iBAAiBY,EAAUX,MAFvD,OAGE,wC,GAhBQe,aAuCbC,mBAXf,SAAyBT,GAEvB,OADAJ,QAAQC,IAAI,QAASG,EAAMU,QACpB,CACLR,WAAYF,EAAME,cAQkB,CAACV,oBAA1BiB,CAA6Cd,GC1CtDgB,E,uKAEF,OACE,6BACE,+CACA,wBAAIV,UAAU,cAEVH,KAAKC,MAAMW,OAAOP,KAAI,SAAAS,GACpB,OACE,wBAAIP,IAAKO,EAAKnB,GAAIQ,UAAU,mBAC1B,yBAAKA,UAAU,aAAaW,EAAKN,gB,GAVhCE,aAgCJC,mBAXf,SAAyBT,GAEvB,OADAJ,QAAQC,IAAI,QAASG,EAAMU,QACpB,CACLA,OAAQV,EAAMU,UAQsB,KAAzBD,CAA+BE,GCF/BE,G,6KAdX,OACE,yBAAKZ,UAAU,OACb,qDACA,yBAAKA,UAAU,YACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,kBAACa,EAAD,Y,GATQN,c,cCHHN,MAXf,WAAsD,IAAlCF,EAAiC,uDAAzBe,EAAiBC,EAAQ,uCACnD,OAAQA,EAAOtB,MACb,IJHyB,gBIKvB,IAAIQ,EAAaF,EAAMiB,QAAO,SAAAC,GAAI,OAAIA,EAAKzB,KAAOuB,EAAOvB,MACzD,OAAOS,EACT,QACE,OAAOF,I,QCRN,SAASmB,EAAgB1B,GAE9B,OADgBsB,EAAgBK,MAAK,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,KCUtCiB,MAVf,WAAqC,IAArBV,EAAoB,uDAAZ,GAAIgB,EAAQ,uCAClC,OAAQA,EAAOtB,MACb,INHyB,gBMIvB,IAAIgB,EAAM,sBAAOV,GAAP,CAAcmB,EAAgBH,EAAOvB,MAC/C,OAAOiB,EACT,QACE,OAAOV,ICEEsB,EANKC,YAAgB,CAClCrB,aACAiB,kBACAT,WCGKc,EAAQC,YAAYC,GAC1B9B,QAAQC,IAAI,mBAAoB2B,EAAMG,YAEtCH,EAAMI,WAAU,kBAAMhC,QAAQC,IAAI,QAAS2B,EAAMG,eACjDH,EAAMK,SAASrC,EAAiB,IAEjCsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,QAGJS,SAASC,eAAe,U","file":"static/js/main.afa82634.chunk.js","sourcesContent":["//Actions are objects that manipulate state with a \"type\" variable, using action.types as a string reference that we identify in this file\n\nexport const ADD_CHARACTER = 'ADD_CHARACTER'; //DECLARING ACTION TYPE\n\n//Below is an action creator setting the default array of objects. action.id will reference each character in the initial array\nexport function addCharacterById(id) {\n  const action = {\n    type: ADD_CHARACTER,\n    id\n  }\n  return action;\n}\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\n// import { bindActionCreators } from 'redux';\nimport { addCharacterById } from '../actions'\n\nclass CharacterList extends Component {\n  render() {\n    console.log(this.props, 'HE;OOOOO')\n    console.log(this.state, 'STATEEEEEE')\n    return(\n      <div>\n        <h4>Heros</h4>\n        <ul className=\"list-group\">\n          {\n            this.props.characters.map(character => {\n              return (\n                <li key={character.id} className=\"list-group-item\">\n                  <div className=\"list-item\">{character.name}</div>\n                  <div\n                    className=\"list-item right-button\"\n                    onClick={() => this.props.addCharacterById(character.id)} > + </div>\n                    <div>\n                    </div>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log('state', state.heroes);\n  return {\n    characters: state.characters,\n  };\n}\n\n// function mapDispatchToProps(dispatch) { // look up mapStateToprops\n//   return bindActionCreators({ addCharacterById }, dispatch) // look up mapdispatch on redux\n// }\n\nexport default connect(mapStateToProps, {addCharacterById})(CharacterList);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass Hero extends Component {\n  render() {\n    return(\n      <div>\n        <h4>Your Hero Squad</h4>\n        <ul className=\"list-group\">\n          {\n            this.props.heroes.map(hero => {\n              return (\n                <li key={hero.id} className=\"list-group-item\">\n                  <div className=\"list-item\">{hero.name}</div>\n                </li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  console.log('state', state.heroes);\n  return {\n    heroes: state.heroes\n  };\n}\n\n// function mapDispatchToProps(dispatch) { // look up mapStateToprops\n//   return bindActionCreators({ addCharacterById }, dispatch) // look up mapdispatch on redux\n// }\n\nexport default connect(mapStateToProps, null)(Hero);","import React, { Component} from 'react';\nimport CharacterList from './CharacterList';\nimport HeroList from './HeroList';\nimport '../styles/index.css';\n\n// import { render } from '@testing-library/react';\n\n//Stateless Component\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       Hello\n//     </div>\n//   );\n// }\n\n//For state manipulation\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Choose Your Character</h2>\n        <div className=\"col-md-6\">\n          <CharacterList />\n        </div>\n        <div className=\"col-md-6\">\n          <HeroList />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import characters_json from '../data/characters.json';\nimport { ADD_CHARACTER } from '../actions/index.js';\n\nfunction characters(state = characters_json, action) {\n  switch (action.type) { //specifies action type. Not necessary at this point but good common practice for larger projects\n    case ADD_CHARACTER:\n      //below will create a new array based on characters that arent selected\n      let characters = state.filter(item => item.id !== action.id);\n      return characters;\n    default:\n      return state;\n  }\n}\n\nexport default characters;","import characters_json from '../data/characters.json';\n\nexport function createCharacter(id) {\n  let character = characters_json.find(c => c.id === id);\n  return character;\n}\n\n//cannot export default or app crashes\n//maybe because it only needs to be shared with one other file and not in the index file for entire application","import { ADD_CHARACTER } from '../actions';\nimport {createCharacter} from './helpers';\n\nfunction heroes(state = [], action) {\n  switch (action.type) {\n    case ADD_CHARACTER:\n      let heroes = [...state, createCharacter(action.id)];\n      return heroes;\n    default:\n      return state;\n  }\n}\n\nexport default heroes;\n","import { combineReducers } from 'redux';\nimport createCharacter from './characters-reducers.js'\nimport characters from './characters-reducers';\nimport heroes from './heroes-reducers';\n\nconst rootReducer = combineReducers({\n  characters,\n  createCharacter,\n  heroes\n})\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport { createStore } from 'redux'; //Creates a Redux store that holds the complete state tree of your app\nimport { Provider } from 'react-redux'; //The <Provider /> makes the Redux store available to any nested components that have been wrapped in the connect() function. Since any React component in a React Redux app can be connected, most applications will render a < Provider > at the top level, with the entire appâ€™s component tree inside of it.\n\n\nimport rootReducers from './reducers/index.js';\nimport { addCharacterById } from './actions/index';\n\n const store = createStore(rootReducers);\n console.log('store.getstate()', store.getState());\n //subscribe is an event listener that fires when code is updated or state is manipulated\n store.subscribe(() => console.log('store', store.getState()));\n store.dispatch(addCharacterById(2)); //This fires off the action above, selecting character with id(or array index of) 2\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}